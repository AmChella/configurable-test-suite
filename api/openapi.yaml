openapi: 3.1.0
info:
  title: Configurable Test Suite API
  version: 1.0.0
  description: API to trigger Playwright tests with inline scenarios and view docs.
servers:
  - url: http://localhost:4001
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /run-test:
    post:
      summary: Trigger Playwright test run
      description: Runs tests with optional inline scenarios.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                env:
                  type: string
                  description: Environment file in configs/ to load
                  example: dev
                headless:
                  type: boolean
                  example: true
                grep:
                  type: string
                  description: Playwright grep filter for tests
                scenarios:
                  description: Inline scenario or array of scenarios
                  oneOf:
                    - $ref: '#/components/schemas/TestConfig'
                    - type: array
                      items:
                        $ref: '#/components/schemas/TestConfig'
      responses:
        '200':
          description: Run completed with results. On failure, may include stdout/stderr when reports are unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    description: Success indicator
                  code:
                    type: integer
                    description: Playwright process exit code
                  runId:
                    type: string
                    description: Unique run identifier
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/TestRecord'
                  http:
                    type: array
                    items:
                      $ref: '#/components/schemas/HttpContextItem'
                  stdout:
                    type: string
                  stderr:
                    type: string
                  note:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /reports:
    get:
      summary: Query reports
      parameters:
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [passed, failed, skipped, timedOut, interrupted]
        - in: query
          name: from
          schema:
            type: integer
            format: int64
        - in: query
          name: to
          schema:
            type: integer
            format: int64
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: runId
          schema:
            type: string
      responses:
        '200':
          description: Reports list
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  count:
                    type: integer
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      byStatus:
                        type: object
                        additionalProperties:
                          type: integer
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/TestRecord'
  /reports/{runId}:
    get:
      summary: Get reports for a specific run
      parameters:
        - in: path
          name: runId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reports for the run
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  runId:
                    type: string
                  count:
                    type: integer
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      byStatus:
                        type: object
                        additionalProperties:
                          type: integer
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/TestRecord'
components:
  schemas:
    HttpTextAttachment:
      type: object
      properties:
        file:
          type: string
        size:
          type: integer
        content:
          type: string
    HttpTraceAttachment:
      type: object
      properties:
        file:
          type: string
        size:
          type: integer
    HttpAttachments:
      type: object
      properties:
        texts:
          type: array
          items:
            $ref: '#/components/schemas/HttpTextAttachment'
        traces:
          type: array
          items:
            $ref: '#/components/schemas/HttpTraceAttachment'
    HttpContextItem:
      type: object
      properties:
        testFolder:
          type: string
        attachments:
          $ref: '#/components/schemas/HttpAttachments'
    TestRecord:
      type: object
      properties:
        title:
          type: string
        location:
          type: string
        status:
          type: string
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepRecord'
        runId:
          type: string
    StepRecord:
      type: object
      properties:
        title:
          type: string
        status:
          type: string
        error:
          type: string
        startTime:
          type: integer
          format: int64
        endTime:
          type: integer
          format: int64
    TestStep:
      type: object
      required: [stepName, action]
      properties:
        stepName:
          type: string
        action:
          type: string
          enum: [goto, click, fill, type, hover, press, waitForTimeout, upload, custom]
        selector:
          type: string
        selectorType:
          type: string
          enum: [css, xpath, id, text, testId]
        path:
          type: string
        data: {}
        nth:
          type: integer
          description: Select nth match when multiple elements match the selector (0-based)
        actionOptions:
          type: object
          additionalProperties: true
          description: Options forwarded to Playwright APIs (e.g., timeout, force, noWaitAfter)
        files:
          type: array
          description: Upload file descriptors (either path or base64 content)
          items:
            $ref: '#/components/schemas/UploadFileItem'
        resolveFrom:
          type: string
          enum: [cwd, none]
          description: How to resolve relative file paths (cwd = from project root; none = use as-is)
        clearFirst:
          type: boolean
          description: Clear any existing selected files before setting new ones
        waitTime:
          type: integer
        validations:
          type: array
          items:
            $ref: '#/components/schemas/ValidationStep'
        customName:
          type: string
    UploadFileItem:
      type: object
      properties:
        path:
          type: string
        name:
          type: string
        mimeType:
          type: string
        contentBase64:
          type: string
    ValidationStep:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [toBeVisible, toBeHidden, toHaveTitle, toHaveURL, toHaveText, toHaveValue, toHaveAttribute, toHaveCSS, toHaveClass, custom]
        selector:
          type: string
        selectorType:
          type: string
          enum: [css, xpath, id, text, testId]
        data: {}
        path:
          type: string
        soft:
          type: boolean
        message:
          type: string
        attribute:
          type: string
        cssProperty:
          type: string
        customName:
          type: string
          description: When type is 'custom', name of the validator in customValidationMap
        nth:
          type: integer
          description: For selector-based validations, target the nth matched element (0-based)
        expectOptions:
          type: object
          additionalProperties: true
          description: "Options forwarded to Playwright's expect matchers (e.g., { timeout: 5000 })"
    TestConfig:
      type: object
      required: [description, enabled, testSteps]
      properties:
        description:
          type: string
        enabled:
          type: boolean
        testSteps:
          type: array
          items:
            $ref: '#/components/schemas/TestStep'
        testOrder:
          type: integer
